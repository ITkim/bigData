<이동 기술 종류>
	
1. html tag를 이용한 방식
		1. 링크 tag: <a>
		2. form의 submit
		3. 일반 button의 onclick		
	
2. servlet api를 이용한 방식 //get,post처럼 생각하면 안된다
		1. forward 방식 
			- 데이터 손실이 없음
			- 서로 다른 servlet이라 하더라도 하나의 servlet처럼 간주
			
		2. redirect 방식
			- servlet간에 redirect가 발생기 무조건 새로운 요청으로 간주
<실행 process>
	
1. 유효 : forward 방식
pageReq.html > LoginCheckController > Success
: http://localhost/step02_pageMove/cont
 -> LoginCheck ~ 랑 Success 를 하나로 취급함 -> cont 	 
	
2. 무효 : redirect 방식
pageReq.html > LoginCheckController > Fail
: http://localhost/step02_gageMove/fail

//forward,redirect는 페이지 이동 방식이고, get,post는 데이터 전송 방식!

<Cookie/Session 메카니즘>

1. client pc에 상태유지값 저장
	- 문자열만 저장 가능
	- 쿠키 개발 기술
		: javax.servlet.http.Cookie
	- 개발 단계
		1단계. Cookie 객체 저장할 문자열 데이터 수만큼 생성
		2단계. client 시스템에 잔존시킬 시간 설정
		3단계. client 시스템에 전송해서 쿠키 저장
		4단계. servlet 이동
		5단계. client로부터 쿠키 정보에 저장된 데이터 획득
		6단계. 삭제.
		
2. server에 상태유지값 저장
	- 객체 타입으로 저장 가능.
	- 세션 개발 기술
		: javax.servlet.http.HttpSession
	- 개발 단계
		1단계. HttpSession 객체 하나만 생성
		2단계. server 메모리에 저장할 데이터 수만큼 세션에 데이터 저장			을 함
			>setAttribute()로 key저장,,, 10개의 데이터면 
			setAttribute로 10번 불러 'ㅁ'
		2단계. servlet 이동
		3단계. client로부터 저장된 데이터 획득
			>getAttribute()
		4단계. 삭제.
			- 세션 무효화
			invalidate()
			null 값으로 정리
			- 생략시 발생되는 문제
					
<웹 페이지 이동 방식에 따른 데이터 저장 및 활용 방식>
1.. 페이지 이동
	1.html
		링크/버튼(일반버튼 or form의 submit)
	2.servlet api
		포워드/리다이렉트
2. 포워드
	- 요청, 응답 객체가 한번 생성되어 공유
3. 리다이렉트
	- 이동되는 page는 새로운 요청으로 인식, 요청, 응답 객체가 새롭게 생성
	- client의 새로운 정보를 요청 객체로부터 획득 가능.
4. 상태 유지를 위한 데이터 저장 방식
	1. Cookie
		- client 시스템에 문자열로만 저장
		생성 > 잔존시간 설정> client 전송 > 이동된 servlet에서 Cookie 		객체를 한번에 배열로 빼옴 
		> getName()/getValue()로 Cookie 정보 활용 가능
			
	2. HttpSession
		- server 시스템 메모리에 저장
		- page 이동 방식과 무관하게 서버 메모리의 데이터를 저장 및 활		용 가능
	
<최종 정리>

1. reqeust.setAttribte(key,value)
	- 이 요청 객체에 저장된 데이처를 활용할 수 있는 page 이동 방식? 
	답: forward //redirect는 request를 만들어서 fail로 저장시키고 새 request를 만들면 fail에 저장된 거 못불러와서 못씀
			
2. session.setAttribute()
	- 이 세션 객체에 저장한 데이터를 활용할 수 있는 page 이동 방식? 
	답: forward/redirect