** web 개발 환경설정 **

1. jdk 기반 데이터베이스
	1) Oracle 자바 개발 환경
2. 개발 tool
	1) Eclipse : ibm
3. rdms
	1) Oracle vender 사의 oracle 유
	2) SQL Developer
4. 브라우저
	1) IE (인터넷 익스플로러)
	2) 크롬 브라우저 - 개발자 tool
5. 서버
	1) 무상 서버 tomcat(WAS)
	
	
** 하둡 hardoop **

: 오라클 데이터베이스보다 훨씬 많은 대용량 데이터를 관리할 수 있는 프로그램
- 설치 시 고성능 컴퓨터 필요
					
					
**필 수 암 기 사 항**

					<-> HTML		|	
[브라우저] - [http] -	<-> jsp			|	<---->	일반 java 클래스
					<-> servlet		|

소통을 하기전에 필수적으로 서버가 활성화되어 있어야 가능함. (tomcat)
브라우저는 HTML, jsp, servlet 과만 소통 가능함. 일반 java 클래스는 브라우저와 직접 소통 불가능
일반 java 클래스는 jsp, servlet 과 소통 가능함.
소통 시에 default 는 http 이다.


** 학 습 언 어 **

1. java 기반 servlet & jsp
		1)servlet - java 기반, 확장자도 .java 
					(요청을 감지하고, 요청이 무엇인지에 따라 biz 로직 처리 위임, jsp에게 출력위임) : controller역할
		2) JSP - 화면 구성 언어 (java 데이터 출력 가능)
				-java,html,java script
2. HTML(구조) & CSS(디자이너)
3. java script
	- 이벤트 처리 언어
	- 서버 데이터를 실시간 화면 갱신 없이 '비동기' 라는 기술로 받는 기술
	
	
** 실 습 구 조 **

1단계 : 브라우저 -(1)-[html]-(2)-> servlet -(3)-> 브라우저
			(1) : get  (2) : post  html : 버튼 & 링크 만들기
			
2단계 : client 가 입력한 데이터를 servlet 에서 획득해서 출력


**web 실습 내용 1 **

1. web page 이동 개발 기술
	- 웹 : HTML, JSP , SERVLET 간의 이동
	- 절대 일반 java 처럼 단순 메소드 호출과는 무관

2. 이동 기술 종류
		1) html tag 를 이용한 방식 (default)
				-링크 tag : <a>
				-form 의 submit
				-일반 button 의 onclick
				
		2) servlet api 를 이용한 방식
				-forward 방식 : 데이터 손실 없음, 서로 다른 servlet 이라 하더라도 하나의 servlet 처럼 간주
				-redirect 방식 : servlet 간에 redirect 가 발생 시 무조건 새로운 요청으로 간주
				
3. 주요 API
		1) javax.servlet.http.HttpServlet
			-public void doGet()
			-public void doPost()
			-public void service()
			
		2) javax.servlet.http.HttpServletRequest
			-접속된 client 만의 요청 정보 보유한 객체
			 (a) String getParameter
			 		-web query string 구조로 전송되는 데이터값 획득
			 		-String 으로만 변환
			 (b) getRequestDispatcher()
			 		
			 (c) setAttribute(String key, Object value)
			 		-요청 객체에 map 형태로 데이터 저장
			 (d) public Object getAttribute(String key)
			 		-요청 객체에 setAttribute() 로 저장한 데이터만 반환
			 					 		
		3) javax.servlet.http.HttpServletResponse
			(a) setContentType()
			(b) getRedirect()
			(c) sendRedirect()
			
3. url 의 변천사
	실행 process
	
		1) 유효 : forward 방식
		pageReq.html -> LoginCheckController -> Success
		: http://localhost/step02_pageMove/cont
		
		2) 무효 : redirect 방식
		pageReq.html -> LoginCheckController -> Fail
		: http://localhost/step02_pageMove/fail
		
		
			

**web 실습 내용 2 **

1. http 기본 특징
		- client 의 정보를 기본적으로 저장 및 관리하지 않음 : 무상태연결(비연결 지향형)
		
2. 로그인 ~ 로그아웃까지의 상태유지 기술
		- 개발자가 직접 코드로 개발

3. 매커니즘
		1) client pc 에 상태 유지값 저장
				-문자열만 저장 가능
				-쿠키 개발 기술 : javax.servlet.http.Cookie
				-개발 단계
						(1) 1단계 : Cookie 객체를 저장한 문자열 데이터 수만큼 생성
						(2)2단계 : client 시스템에 잔존시킬 시간 설정
						(3)3단계 : client 시스템에 전송해서 쿠키 저장
						(4)4단계 : servlet 이동
						(5)5단계 : client 로부터 쿠키 정보에 저장된 데이터 획득
						(6)6단계 : 삭제
						
		2) server 에 상태 유지값 저장
				-객체 타입으로 저장 가능
				-세션 개발 기술 : javax.servlet.http.HttpSession
				-개발 단계
						(1) 1단계 : HttpSession 객체를 하나만 생성
						(2)2단계 : server 메모리에 저장할 데이터 수만큼 세션에 데이터 저장을 함 - setAttribute()
						(3)3단계 : servlet 이동
						(4)4단계 : HttpSession 으로부터 저장된 데이터 획득 - getAttribute()
						(5)5단계 : 삭제
											 - HttpSession 세션 무효화
											 		-invalidate()
													-null 값으로 정리
											- 생략 시 발생되는 문제
				
4. 웹 페이지 이동 방식에 따른 데이터 저장 및 활용 방식			 
		1) 페이지 이동
				(a) html
						-링크/버튼(일반버튼 or form 의 submit)
				(b) servlet api			
						-포워드/리다이렉트
		2) 포워드
				- 요청, 응답 객체가 한 번 생성되어 공유
		3) 리다이렉트
				- 이동되는 page는 새로운 요청으로 인식, 요청, 응답 객체가 새롭게 생성
				-client 의 새로운 정보를 요청 객체로부터 획득 가능
		4) 상태 유지를위한 데이터 저장 방식
				(a) Cookie
					-client 시스템에 문자열로만 저장
						생성 -> 잔존시간 설정 -> client 에 전송 -> 이동된 servlet 에서 Cookie 객체들 한번에 배열로 빼옴 -> getName()/getValue() 로 쿠키정보 활용가능				
				(b) HttpSession
					-server 시스템 메모리에 저장
					-page 이동 방식과 무관하게 서버 메모리의 데이터를 저장 및 활용 가능

5. 최종 정리
		1) request.setAttribute(key,value)
				- 이 요청 객체에 저장한 데이터를 활용할 수 있는 page 이동 방식?
				- 답 : forward
		2) session.setAttribute()
				-이 세션 객체에 저장한 데이터를 활용할 수 있는 page 이동 방식?
				- 답 : forward / redirect  
				
				
**servlet 학 습**

1. http
		- 브라우저와 서버간의 통신시에 사용되는 약속(protocol)
		- w3에서 관리
		
2. 주요 API
		- http 통신 로직을 이미 100% 반영하여 완벽하게 구현한 API 다수 제공, 개발자들은 사용만.
		- http 통신 기반의 자바로 개발하는 웹 어플리케이션
				1) client 가 전송하는 데이터를 보유하게 되는 API : HttpServletRequest
				2) 접속한 client 에게만 응답하는 기능의 API : HttpResponse
				3) http 를 고려해서 구현한 상위 클래스로 제공 API : HttpServlet
				
				*문제 - Servlet A 객체 : HttpServletRequest 객체수 : HttpServletResponse 객체수 : 접속한 client 수 = 1 : 100 : 100 : 100명 
				
3. client 가 server 에 요청하는 방식(스펙)

	1) get 방식 (데이터 양이 소량일 때만 허용)
			- client 가 서버에 데이터 전송 시 url 에 데이터가 오픈되어 전송
			-servlet API doGet() 가 처리
			-post 라는 코드상의 명시 없이 url 로 요청하는 모든 방식 (default 방식)
				example) http://www.daum.net
								 http://www.google.com
			- 북마크용으로 사용되는 형태
			
	2) post 방식 (데이터 양이 많을 때 사용하는 방식)
			- client 가 서버에 데이터 전송 시 데이터가 은닉되어 전송
			- servlet API doPost() 가 처리

 4. 상식
 		*** url 요청 시 url 값
 		1) http://ip(도메인):port/project명/file명
			ex ) http://www.naver.com:80/index.html
		2) port
			80 : http 통신 규약의 default port, 생략 시 무조건 80으로 간주	
		3) url 의 web query string
		http://ip:port/project/file명?key1=value1&key2=value2...
		key1~ 부터는 웹 쿼리 스트링
		서버에 전송되는 데이터를 표현하는 방식
		*** client 가 웹상에 index.html 을 요청해서 server 가 응답하는 process
		
		1. 서버에 웹 실행 소스가 있어야함
		2.서버가 시작(실행) 되어야함
		3.브라우저를 실행해야함
		4.브라우저에 url 입력해야함
		5.서버가 요청을 받음
		6.서버가 요청받고 로직 처리 후 접속한 client 에게 응답함
		


** 용 어 **
	WAS : Web Application Server - www, 즉 인터넷 상에서 브라우저와 요청, 응답기능의 서버
	servlet :  1) java 기반의 웹 개발 스펙
				   2) http 통신이 가능한 자바 스펙
	tomcat : 아파치 비 영리 재단에서 제공하는 무료 WAS - servlet 과 jsp 실행 engine, web container, was = server	
					(참고 : 상용 서버 종류 - 웹로직(오라클), 웹스피어(ibm), 오라클서버..)
	웹프로젝트 = [web] context = 웹 어플리케이션



1. 학 습 순 서

		servlet -> jsp -> java script -> Ajax
		
2. servlet 주요 학습 내용

		1) 실행 환경에 대한 이해
		2) servlet 의 주요 API 학습
		3) web page 이동 API 에 대한 이해 & 개발 skill
		4) client 상태 유지를 위한 개발 기술 (세션, 쿠키)

3. JSP

		1) 최초 client 가 해당 JSP 를 요청 시 tomcat 이 servlet 으로 자동 변환 (*.java -> *.class -> 메모리에 로딩)	
				- JSP 는 servlet 이다.
		2) 개발코드는 tag 위주
				a)  java/html tag/java script
				b) jsp tag / jsp scripting tag / jsp action tag / EL / JSTL
				
			*tag의 예 :	<tag명>데이터 또는 표현식</tag명>
				