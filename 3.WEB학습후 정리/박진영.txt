● 느낌과 생각

WAS를 통해 웹 환경과 자바 환경을 연결해서 구현 하는 것을 중점으로 학습을 진행한다고 생각합니다.
HTML => 웹을 다루기 위한 기본 구성
CSS => 웹 디자인에 최적화로 배움
SERVLET/JSP => 웹 페이지 간 이동과 자바와의 소통을 하는 데이터 처리를 배움

● 강의 요약

○Client가 server에 요청하는 스펙 => get과 post 방식.
  - get 방식 
	- client가 서버에 데이터 전송시 url에 데이터가 오픈되어 전송 ( ip:port/프로젝트경로/?web query)
	- 데이터의 양이 소량일 때 사용하며, 북마크 등 해당 데이터값이 포함된 페이지를 이용하고 싶을 때 사용.
	- 코드상에 post의 명시가 없을 시 get방식이며 default값이다. 
	( post가 명시되어있어도 주소를 직접 치고 들어가는 행위 또한 get방식)
	- servlet API doGet() 메소드가 처리

  - post 방식
	- client가 서버에 데이터 전송시 데이터가 은닉되어 전송
	- 데이터의 양이 많을 때 사용하는 방식
	- 따라서 보안을 고려하거나 데이터가 많을 시 post로 데이터를 request하게 함.
	- servlet API doPost() 메소드가 처리

  - service 
	- get과 post를 service 하나의 메소드로 처리하며, 재정의를 통해 개발자의 판단에 따라서
	여러 조건에 알맞게 메소드들을 선언하여 사용.
	- 주로 쓰인다고 기억합니다.

○ web page 이동 개발 기술
  - html/jsp/servlet 간의 이동
  - 절대 일반 자바처럼 단순 메소드 호출과 무관

○ 이동 기술의 종류
  1. html tag를 이용한 방식
	1-1) 링크 tag : <a>		=> a href를 통해 주소 이동을 배움
	1-2) form의 submit	
	1-3) button의 onClick
  2. Servlet API를 이용한 방식
	2-1) foward 방식
		-> 데이터 손실 X
		-> 서로 다른 servlet이라 하더라도 하나의 servlet처럼 간주. ( request와 response 공유)
		-> ex) 쿠키 생성시 처음 servlet에서 생성을 하고 저장을 시킨 후 넘어갈 servlet으로 forward 해줄경우
		   처음 servlet 객체 생성 시에 저장된 쿠키가 없기 때문에 쿠키값 인식을 못함
	2-2) redirect 방식
  		-> servlet간에 redirect가 발생시 무조건 새로운 요청으로 간주
 		-> 따라서 각 servlet의 객체는 서로 다르다.
	2-3) forwar와 redirect의 실행 process
		2-3-1) 유효 : forward 방식	=> 해당 servlet주소를 유지하면서 다른 servlet을 띄워줌
		2-3-2) 무효 : redirect 방식	=> servlet이 변경된 주소로 넘어가서, 다른 주소값.

○ 주요 API
  1. javax.servlet.http.HttpServlet
	- public void doGet()
	- public void doPost()
	- public void service()
  2. javax.servlet.http.HttpServletRequest
	- 접속된 client만의 요청 정보를 보유한 객체
	2-1) String getParameter()		=> Request로 부터 servlet으로 값 받아올 때
		- web query string 구조로 전송되는 데이터 값 획득
		- String으로 반환
	2-2) getRequestDispacher()		=> 다른 servlet으로 forward 시켜주기 위한 메소드
	2-3) public void setAttribute(String key, Object value)	
		- 요청 객체에 데이터를 Map 형태로 데이터를 저장함.
	2-4) public void getAttribute(String key)		=> getName()을 통해 key값을 받아와서 사용
		- 요청 객체에 setAttribute()로 저장한 데이터 반환

  3. javax.servlet.http.HttpServletResponse
	3-1) setContentType()		=> (문자)데이터 인코딩 설정
	3-2) getWiter()			=> 웹에 출력을 위한 메소드
	3-3) sendRedirect()			=> Redirect는 새로운 요청으로 간주하여 해당 servlet 요청 완료 후 새로운 요청으로 간주
	
○ http의 기본 특징
  1. client 정보를 기본적으로 저장 및 관리 X
  2. 무상태 연결 유지
  => 한명의 유저가 링크를 세 번 타고 넘어가는 행위 시, 세 번의 각각 다른 행위로 간주
  	=> 따라서, 로그인~로그아웃까지의 상태유지 기술은 개발자가 직접 코드로 개발해야함!!!

○ 메카니즘(기술)
  1. client pc에 상태 유지값 저장
	- 문자열만 저장 가능(데이터 양의 제한)
	- 쿠키 개발 기술
		: javax.servlet.http.Cookie
	- 개발 단계
		1단계) Cookie 객체를 저장할 문자열 데이터 수 만큼 생성	=>new Cookie(key,value)
		2단계) client 시스템에 잔존시킬 시간을 설정  => cookie변수명.setMaxAge(seconds)
		3단계) client 시스템에 전송해서 쿠키 저장 => response.addCookie(쿠키변수명)
		4단계) servlet 이동 => 거의 대부분 redirect로 이용(명령한 요청이 끝나야 쿠키가 생성되기 때문)
		5단계) client로부터 쿠키 정보에 저장된 데이터 획득 => Cookie[] all = request.getCookies()
								-> 배열을 돌며 all[i]. getName().equals("key값")를 통해 키에 해당하는 인덱스를 검색
								    이후 all[i].getValue로 각 value 획득
		6단계) 삭제
  2. server에 상태 유지값 저장
	- 객체 타입으로 저장 가능
	- 세션 개발 기술 : javax.servlet.http.HttpSession
	- 개발 단계
		1단계) HttpSession 객체를 "하나만" 생성 => HttpSession session = request.getSession();
				-> 직접 new를 통해 생성할 수 없고 request로 부터 받아와야함
		2단계) server 메모리에 저장할 데이터 수 만큼 세션에 데이터를 저장	  => session.setAttribute(key,value)
		3단계) servlet 이동 => forward/redirect 둘 다 가능 -> 개발자 판단에 따라 사용
		4단계) HttpSession으로 부터 쿠키 정보에 저장된 데이터 획득 => session.getAttribute(key)
		5단계) 삭제
			- 세션 무효화  =>  invalidate()로 무효화
					session =null 처리 (2중으로 무효화하여 확실하게 처리)
	=> 무효화 생략시 발생하는 문제 : 서버 과부화 ~> 다운

○ 웹 페이지 이동 방식에 따른 데이터 저장 및 활용 방식
  1) 페이지 이동 방식
	1-1) html - link, button(일반버튼 or form의 submit)
	1-2) servlet API - forward, redirect
  2) forward - 요청, 응답 (request, response) 객체가 한번 생성되어 공유
  3) redirect - 이동되는 page는 새로운 요청으로 인식, 요청과 응답 객체가 새롭게 생성
	    - client의 "새로운 정보"를 요청 객체로 부터 획득 가능
  4) 상태유지를 위한 데이터 저장 방식
	4-1) Cookie
		- client 시스템에 문자열로만 저장
		- 위의 6단계를 통해서 구현

	4-2) HttpSession
		- server 시스템 메모리에 저장
		- page이동 방식과 무관하게 서버 메모리의 데이터를 저장 및 활용 가능


○ request와 session의 setAttribute(key,value) 차이점 !
  - request는 forward를 통해 요청, 응답을 공유하는 servlet에서만 사용 가능
  - session은 forward/redirect에 관련 없이 서버에 상태 유지값을 저장하기 때문에 모든 servlet 이용 가능
	(단, session을 선언하고 값을 준 이후부터!)

		