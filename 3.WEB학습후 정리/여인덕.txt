## Web 내용 정리 ##
학습 기간: 2018.07.17

1. 용어 정리 
1)WAS[Web Application Server]
-인터넷 상에서 브라우저와 요청, 응답 기능의 서버
		
2) servelet 
-자바 기반의 웹 개발 스펙
-http 통신이 가능한 자바 스펙
 
3)tomcat( 이거 말고도 서버 종류는 다양함) 
-아파치 비 영리 재단에서 제공하는 무료 WAS =servelet engine = web container =server 	
=서블렛과 jsp 실행 엔진이라고 볼 수 있음. 
(참고: 상용 서버 종류 >> 웹로직(오라클 인수), 웹스피어(IBM), 오라클 서버..) 
		
4)웹 프로젝트= [web] context= 웹 어플리케이션 	

2. 학습 순서: servlet > jsp > java Script > Ajax 로 진행

3. Servlet 주요학습 내용 
1) 실행 환경에 대한 이해 

2) 서블릿 주요 API에 대한 이해 필요 

3) web page 이동 API에 대한 학습 및 개발 스킬 ***** 이게 서블렛에서 제일 중요한 부분 *****
- 브라우저 자체 Url 값이 바뀌면서 엄청 정신 없음

4) 클라이언트의 상태 유지를 위한 개발 기술
-쿠키 , 세션 

4. JSP
1) 클라이어트가 해당 jsp를 요청 시 탐캣이 서블릿으로 자동 변환됨. 
자동 변환(*java > *.class > 메모리에 로딩)	
jsp는 결국엔 서블릿이되는 것. 	

2) 개발 코드는 tag 위주 
(1) java/ html tag/ java script 
(2) jsp tag
jsp scripting tag***
jsp action tag***
EL***
JSTL***

---------------------------------------------------------------------------------------------------------
학습기간: 2018.07.18 오전
1. 웹 페이지 이동 개발 기술 
1)html/jsp/ servlet 간의 이동 
2)절대 일반 자바처럼 단순 메소드 호출과는 무관 

2. 이동 기술 종류 
1)html tag 이용한 방식 
(1) 링크 tag: <a> ex. 네이버  이동 
(2) form의 submit -
(3) 일반 버튼의 온클릭 
	
2)servlet api를 이용한 방식 	
(1) foward(썬의 메카니즘이 아님) 겟 포스트와는 다름. 페이지 이동의 형태를 의미하는 것 
    -데이터 손실 없음 
    -서로 다른 서블렛이라 하더라도 하나의 서블렛처럼 간주하는 것.  (같은 내용으로 본다는 것) 
		
(2) redirect 방식: www에서 제시한 화면 처리 방식. 모든언어가 지원하는 방식(언어가 달라도 다 이렇게 사용함) 
		-무조건 서블렛 간에 redirect이 생기면 무조건 새로운 요청으로 간주
		
3. 주요 API
1)  javax.servlet.http.HttpServlet
(1) public void doGet()
(2) public void doPost()
(3) public void service()

2) javax.servlet.http.HttpServletRequest
- 접속된 client만의 요청 정보 보유한 객체

(1) String getParameter()
-web query string 구조로 전송되는 데이터 값 획득 
-String으로만 반환 

(2) getRequestDispatcher()

(3) public void setAttribute(String key, Object value)
- 요청 객채를 map 행태로 데이터 저장 

(4) public Object getAttribute(String key)
- 요청 객체에 setAttribute()로 저장한 데이터만 반환
   
3) javax.servlet.http.HttpServletResponse
(1) setContentType()
(2) getWriter()
(3) sendRedirect()
      
4. 주소 줄 비교 (url 변천사) 
1) 실행 프로세스 
(1) 유효: foward 방식 
pageReq.html> LoginCheckController > Success  
: http://localhost/step02-pageMove/cont 
>> 컨트롤러랑 석세스랑 하나로 간주하기 때문에 url이 cont로 마무리됨.
     	
2) 무효: redirect 방식 		
pageReq.html> LoginCheckController > Fail
: http://localhost/step02-pageMove/fail 
>> 컨트롤러랑 페일을 다른 것으로 간주하기 때문에 뒤에 fail이 붙음

 ---------------------------------------------------------------------------------------------------------
학습 기간: 2018.07.18 오후    
     	학습 내용

1. http 기본 특징 
1) 절대 고객의 정보를 기본적으로 저장 및 관리하지 않음 (=무상태 연결 유지 // 비연결 지향형 ) 

2. 로그인 ~ 로그 아웃까지의 상태 유지 기술 
- 개발자가 직접 코드 개발 

3. 메카니즘 
1) 클라이언트 PC에 상태유지값 저장  >> 클라이언트 PC 마음대로 사용 불가능하므로 문자열만 저장 가능 
(1) 쿠키 개발 기술 -javax.servlet.http.Cookie
(2)개발 단계 
1단계: 쿠키 객체 저장할 수만큼 문자열 생성
2단계: 클라이언트 시스템에 얼마만큼(양이 아닌 시간을 읨)  쿠키를 잔존시킬 것인지 시간을 설정하기 (단, 쿠키 정보 잔존 여부는  클라이언트에 의해 결정) 
3단계: 클라이언트 시스템에 전송해서 쿠키 저장 
4단계: servlet 이동 
5단계: 클라이언트로부터 쿠키 정보에 저장된 데이터 확보 
6단계: 삭제 
	
2) 서버(컨테이너)에 상태유지값 저장  >> 타입 제한이 없고, 객체 타입으로 저장 가능 (기본 타입만 아니면 ㄱㅊ ) 
(1) 세션 개발 기술-javax.servlet.http.httpsession
(2)개발 단계 
1단계: httpsession 객체를 클라이언트마다 하나씩 생성 
2단계: 서버 메모리에 저장할 데이터 수만큼 세션에 데이터 저장을 함 -setattribute()
3단계: httpsession로부터 저장된 데이터 획득 -getattribute()
4단계: 삭제 
	 -세션 무효화 
	 -invalidate() 
	 -null값으로 정리 
	 -생략시 발생되는 문제 : 서버 다운 잼 	

4. 웹 페이지 이동 방식에 따른 데이터 저장 및 활용 방식
1) 페이지 이동 
(1) html -링크 / 버튼 (일반 버튼 or form의 submit) 

2) servlet API -foward/ redirect
(1)포워드 : 요청 응답 객체가 한번 생성되어 공유 
(2)리다이렉트: 이동되는 페이지는 새로운 요청으로 인식, 요청 , 응답 객체가 새롭게 생성 
					 클라이언트의 새로운 정보를 요청 객체로부터 획득 가능 

3) 상태 유지를 위한 데이터 저장 방식
(1) Cookie
   -클라이언트 시스템에 문자열로만 저장 
    생성--> 잔존시간 설정 --> 클라이언트 시스템에 전송 -> 이동된 서블렛에서 쿠키 객체들 한번에 배열로 빼옴 --> getname(), getvalue()로 받아오기 [쿠키 정보 활용 가능]
		
(2) HttpSession	
   -서버 시스템에 메모리 저장 
   -페이지 이동방식과 무관하게 서버 메모리에 데이터를 저장 및 활용 가능 

5. 최종 정리 
1. request.setAttribute(key, value) 
- 이 요청 객체에 저장한 데이터를 활용할 수 있는 페이지 이동 방식 ?   foward
2. session.setAttribute()	
- 이 요청 객체에 저장한 데이터를 활용할 수 있는 페이지 이동 방식 ?  foward, redirect
	
		 	
	
     	
      		
		
	